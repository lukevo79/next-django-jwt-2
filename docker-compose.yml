###############################################################################
# docker-compose.yml
# 27/06/2025 - Luca Volpi - lvolpi@cvservicesconsulting.com
#
# File per la creazione dei container dei servizi api, db e frontend
# NOTA: Da modificare per produzione
###############################################################################

# Definizione servizi
services:
  #Servizio DB MySQL
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
      tags:
          - "ndj2-db:dev"
          - "ndj2-db:latest"
    image: ndj2-db:dev
    container_name: ndj2-db-dev
    volumes:
      - ndj2-dev-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - development
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5
  #Servizio API Django
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      tags:
        - "ndj2-api:dev"
        - "ndj2-api:latest"
    image: ndj2-api:dev
    container_name: ndj2-api-dev
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/usr/src/app
    ports:
      - "8000:8000"
    networks:
      - development
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    command: python manage.py runserver 0.0.0.0:8000

  #Servizio Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      tags:
        - "ndj2-frontend:dev"
        - "ndj2-frontend:latest"
    image: ndj2-frontend:dev
    container_name: ndj2-frontend-dev
    # restart: always
    depends_on:
      api:
        condition: service_started
    volumes:
      - ./frontend:/usr/src/app
      - ndj2-frontend-dev-node-modules:/usr/src/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - development
    environment:
      - NODE_ENV=${NODE_ENV_DEV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL_DEV}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING_DEV}
    command: npm run dev -- -H 0.0.0.0

volumes:
  ndj2-dev-data:
  ndj2-frontend-dev-node-modules:
networks:
  development: